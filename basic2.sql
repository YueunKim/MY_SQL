SELECT TABLE_NAME
FROM USER_TABLES;

--CROSS JOIN : 조건없이 병합시키는 내용
SELECT * FROM STUDENT;
SELECT * FROM ENROL;

SELECT STUDENT.*, ENROL.*
FROM STUDENT
CROSS JOIN ENROL;

--EQUL JOIN : 공통분모를 기준으로
SELECT * FROM STUDENT;
SELECT * FROM ENROL;

SELECT STUDENT.STU_NO, STU_NAME, STU_DEPT, ENR_GRADE
FROM STUDENT, ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO;

--NATURAL JOIN - 병합된 코드가 어떤 것인지 모름
SELECT STU_NO, STU_NAME, STU_DEPT, ENR_GRADE
FROM STUDENT NATURAL JOIN ENROL;

--JOIN USING - 병합된 코드가 어떤 것인지 암
SELECT STU_NO, STU_NAME, STU_DEPT, ENR_GRADE
FROM STUDENT JOIN ENROL USING(STU_NO);

--JOIN ON : ~일때 
SELECT STUDENT.STU_NO, STU_NAME, STU_DEPT, ENR_GRADE
FROM STUDENT JOIN ENROL ON STUDENT.STU_NO=ENROL.STU_NO;

--EX)101번 과목을 수강하는 학생들의 학번과 이름?
SELECT STUDENT.STU_NO, STU_NAME
FROM STUDENT, ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND SUB_NO=101; --AND로 조건문 추가

--EX)과목번호 101 또는 102를 수강하는 학생의 학번과 이름?
SELECT STUDENT.STU_NO, STU_NAME
FROM STUDENT, ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND (SUB_NO=101 OR SUB_NO=102);

--EX)'컴퓨터개론'과목을 수강하는 학생들의 학번과 이름?
SELECT * FROM SUBJECT;
--STU와 ENROL를 먼저 조인하고 과목번호로 SUB와 조인
SELECT ENROL.STU_NO, STU_NAME, SUB_NAME
FROM STUDENT, ENROL, SUBJECT
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND ENROL.SUB_NO=SUBJECT.SUB_NO
AND SUB_NAME ='컴퓨터개론';

--NON EQUL JOIN
SELECT * FROM EMP;
SELECT * FROM SALGRADE;

SELECT EMPNO, ENAME, SAL, GRADE
FROM EMP, SALGRADE
WHERE SAL BETWEEN LOSAL AND HISAL;

--SELF JOIN
--EX)EMP테이블에서 자신의 상급자를 검색
SELECT * FROM EMP;

SELECT A.EMPNO AS 사원번호, A.ENAME AS 사원이름, B.EMPNO AS 상급자번호, B.ENAME AS 상급자이름
FROM EMP A, EMP B --A테이블, B테이블을 만듬
WHERE A.MGR=B.EMPNO;

--OUTER JOIN : 길이가 다른 두 테이블에서 길이가 같은 부분만 출력
SELECT * FROM ENROL;
SELECT * FROM SUBJECT;

SELECT A.*, SUB_NAME
FROM ENROL A RIGHT OUTER JOIN SUBJECT B
ON A.SUB_NO=B.SUB_NO
ORDER BY 1;

SELECT A.EMPNO AS 사원번호, A.ENAME AS 사원이름, B.EMPNO AS 상급자사원번호, B.ENAME AS 상급자이름
FROM EMP A LEFT OUTER JOIN EMP B 
ON A.MGR=B.EMPNO;

--SUBQUERY(부질의) : SELECT - SELECT - ...
--EX)옥성우 학생보다 신장이 큰 학생들의 학번, 이름, 신장을 검색

--1
SELECT STU_HEIGHT
FROM STUDENT
WHERE STU_NAME='옥성우';

SELECT STU_NO, STU_NAME, STU_HEIGHT
FROM STUDENT
WHERE STU_HEIGHT > 172;

--2
SELECT STU_NO, STU_NAME, STU_HEIGHT
FROM STUDENT
WHERE STU_HEIGHT > (SELECT STU_HEIGHT
FROM STUDENT
WHERE STU_NAME = '옥성우'); --SELECT문을 두번

--3
SELECT STU_NO, STU_NAME, STU_HEIGHT
FROM STUDENT
WHERE STU_HEIGHT >= (SELECT STU_HEIGHT
FROM STUDENT
WHERE STU_NAME = '옥성우')
AND STU_NAME <>'옥성우'; --옥성우는 제외

--단일열 부질의
--EX)학생테이블에서 박희철학생과 같은 체중을 가진 학생의 정보를 구하라
SELECT * 
FROM STUDENT
WHERE STU_WEIGHT = (SELECT STU_WEIGHT
FROM STUDENT
WHERE STU_NAME = '박희철')
AND STU_NAME <>'박희철';

--EX)학생테이블에서 컴퓨터정보학과와 같은 반인 다른학과의 학생정보를 구하라
SELECT * 
FROM STUDENT
WHERE STU_CLASS IN(SELECT STU_CLASS
FROM STUDENT
WHERE STU_DEPT='컴퓨터정보')
AND STU_DEPT <>'컴퓨터정보';

--EX)신장이 전체학생들의 평균신장보다 큰 학생을 구하라
SELECT * 
FROM STUDENT
WHERE STU_HEIGHT > (SELECT AVG(STU_HEIGHT) 
FROM STUDENT);

--EX)신장이 모든 학과들의 평균신장보다 큰 학생의 정보를 구하라
--1
SELECT * 
FROM STUDENT
WHERE STU_HEIGHT > ALL
(SELECT AVG(STU_HEIGHT) FROM STUDENT
GROUP BY STU_DEPT);

--2
SELECT * 
FROM STUDENT
WHERE STU_HEIGHT > 
(SELECT MAX(AVG(STU_HEIGHT)) FROM STUDENT
GROUP BY STU_DEPT);

--EX)컴퓨터정보과의 최소신장과 비교하여 최소신장이 더 큰 학과의 학과명과 최소신장을 구하라
SELECT STU_DEPT, MIN(STU_HEIGHT)
FROM STUDENT
GROUP BY STU_DEPT HAVING MIN(STU_HEIGHT) >
(SELECT MIN(STU_HEIGHT) FROM STUDENT WHERE STU_DEPT = '컴퓨터정보');

--복수열 부질의
CREATE TABLE TEST(EMPNO, ENAME, SAL, COMM, DEPTNO)
AS
SELECT EMPNO, ENAME, SAL, COMM, DEPTNO
FROM EMP
WHERE DEPTNO = 1; --DEPTNO =1은 없음
DESC TEST;

INSERT INTO TEST VALUES(11, 'APPLE', 1000, NULL, 30);
INSERT INTO TEST VALUES(12, 'BANANA', 2000, 100, 30);
INSERT INTO TEST VALUES(13, 'CHEESE', 1000, 0, 10);
INSERT INTO TEST VALUES(14, 'DOG', 2000, NULL, 20);
INSERT INTO TEST VALUES(15, 'EGG', 1000, 100, 20);
--없앨때는 DELETE FROM TEST; 

SELECT * FROM TEST;

--집합연산자
--UNION/UNION ALL/INTERESCT/MINUS

CREATE TABLE A_STUDENT
AS
SELECT *
FROM STUDENT
WHERE STU_DEPT IN ('기계','전기전자');

CREATE TABLE B_STUDENT
AS
SELECT *
FROM STUDENT
WHERE STU_DEPT IN ('전기전자','컴퓨터정보');

SELECT * FROM A_STUDENT;
SELECT * FROM B_STUDENT;

--UNION : 공통분모 하나를 선택하여 합침, UNION ALL 은 그냥 모두 다 합침
SELECT * FROM A_STUDENT
UNION
SELECT * FROM B_STUDENT;

SELECT * FROM A_STUDENT
INTERSECT
SELECT * FROM B_STUDENT;

SELECT * FROM A_STUDENT
MINUS
SELECT * FROM B_STUDENT;